{"version":3,"sources":["/home/pbendazzoli/cursos/AgendaLives/frontend/angular/node_modules/@angular/flex-layout/esm5/grid.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;MAkBM,AAGA;;;;;;;0BACmN;;;;;;;;;;;KAWpN,AAGC;;;;;;;;;;;;2KAOG;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BJ;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6EA,AAGA;;;;;;;0BAC+O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgD/O,AAGA;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8BD;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuFA,AAGA;;;;;;;0BACmO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgDnO,AAGA;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8BD;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiEA,AAGA;;;;;;;0BAC+M;;;;;;;;;;;KAWhN,AAGC;;;;;;;;;;;;0KAOG;;;;;;;;;;;;;;;;;;;;;;;;;KAyBJ;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCA,AAGA;;;;;;;0BAC+M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgD/M,AAGA;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2BD;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoCA,AAGA;;;;;;;0BAC+M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgD/M,AAGA;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2BD;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;MA0BA,AAGA;;;;;;;0BACuN;;;;;;;;;;;KAWxN,AAGC;;;;;;;;;;;;4KAOG;;;;;;;;;;;;;;;;;;;;;;;;;KAyBJ;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8CA,AAGA;;;;;;;0BAC2N;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgD3N,AAGA;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BD;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+BA,AAGA;;;;;;;0BAC2M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgD3M,AAGA;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BD;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;MA0BA,AAGA;;;;;;;0BAC2M;;;;;;;;;;;KAW5M,AAGC;;;;;;;;;;;;yKAOG;;;;;;;;;;;;;;;;;;;;;;;;;KAyBJ;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8CA,AAGA;;;;;;;0BAC+M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgD/M,AAGA;;;;;;;;;;;;;;;;;;oBAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BD;;;;;;;0BAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAOC","file":"grid.es5.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends, __spreadArrays } from 'tslib';\nimport { Directive, ElementRef, Injectable, NgModule, Input, ɵɵdefineInjectable } from '@angular/core';\nimport { MediaMarshaller, BaseDirective2, StyleBuilder, StyleUtils, CoreModule } from '@angular/flex-layout/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/grid-align/grid-align.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar ROW_DEFAULT = 'stretch';\n/** @type {?} */\nvar COL_DEFAULT = 'stretch';\nvar GridAlignStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridAlignStyleBuilder, _super);\n    function GridAlignStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    GridAlignStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        return buildCss(input || ROW_DEFAULT);\n    };\n    GridAlignStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridAlignStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridAlignStyleBuilder_Factory() { return new GridAlignStyleBuilder(); }, token: GridAlignStyleBuilder, providedIn: \"root\" });\n    return GridAlignStyleBuilder;\n}(StyleBuilder));\nvar GridAlignDirective = /** @class */ (function (_super) {\n    __extends(GridAlignDirective, _super);\n    function GridAlignDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-align';\n        _this.styleCache = alignCache;\n        _this.init();\n        return _this;\n    }\n    GridAlignDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridAlignDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridAlignStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    return GridAlignDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar alignCache = new Map();\n/** @type {?} */\nvar inputs = [\n    'gdGridAlign',\n    'gdGridAlign.xs', 'gdGridAlign.sm', 'gdGridAlign.md', 'gdGridAlign.lg', 'gdGridAlign.xl',\n    'gdGridAlign.lt-sm', 'gdGridAlign.lt-md', 'gdGridAlign.lt-lg', 'gdGridAlign.lt-xl',\n    'gdGridAlign.gt-xs', 'gdGridAlign.gt-sm', 'gdGridAlign.gt-md', 'gdGridAlign.gt-lg'\n];\n/** @type {?} */\nvar selector = \"\\n  [gdGridAlign],\\n  [gdGridAlign.xs], [gdGridAlign.sm], [gdGridAlign.md], [gdGridAlign.lg],[gdGridAlign.xl],\\n  [gdGridAlign.lt-sm], [gdGridAlign.lt-md], [gdGridAlign.lt-lg], [gdGridAlign.lt-xl],\\n  [gdGridAlign.gt-xs], [gdGridAlign.gt-sm], [gdGridAlign.gt-md], [gdGridAlign.gt-lg]\\n\";\n/**\n * 'align' CSS Grid styling directive for grid children\n *  Defines positioning of child elements along row and column axis in a grid container\n *  Optional values: {row-axis} values or {row-axis column-axis} value pairs\n *\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-justify-self\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#prop-align-self\n */\nvar DefaultGridAlignDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridAlignDirective, _super);\n    function DefaultGridAlignDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs;\n        return _this;\n    }\n    DefaultGridAlignDirective.decorators = [\n        { type: Directive, args: [{ selector: selector, inputs: inputs },] },\n    ];\n    return DefaultGridAlignDirective;\n}(GridAlignDirective));\n/**\n * @param {?=} align\n * @return {?}\n */\nfunction buildCss(align) {\n    if (align === void 0) { align = ''; }\n    /** @type {?} */\n    var css = {};\n    var _a = align.split(' '), rowAxis = _a[0], columnAxis = _a[1];\n    // Row axis\n    switch (rowAxis) {\n        case 'end':\n            css['justify-self'] = 'end';\n            break;\n        case 'center':\n            css['justify-self'] = 'center';\n            break;\n        case 'stretch':\n            css['justify-self'] = 'stretch';\n            break;\n        case 'start':\n            css['justify-self'] = 'start';\n            break;\n        default:\n            css['justify-self'] = ROW_DEFAULT; // default row axis\n            break;\n    }\n    // Column axis\n    switch (columnAxis) {\n        case 'end':\n            css['align-self'] = 'end';\n            break;\n        case 'center':\n            css['align-self'] = 'center';\n            break;\n        case 'stretch':\n            css['align-self'] = 'stretch';\n            break;\n        case 'start':\n            css['align-self'] = 'start';\n            break;\n        default:\n            css['align-self'] = COL_DEFAULT; // default column axis\n            break;\n    }\n    return css;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/align-columns/align-columns.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_MAIN = 'start';\n/** @type {?} */\nvar DEFAULT_CROSS = 'stretch';\nvar GridAlignColumnsStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridAlignColumnsStyleBuilder, _super);\n    function GridAlignColumnsStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    GridAlignColumnsStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function (input, parent) {\n        return buildCss$1(input || DEFAULT_MAIN + \" \" + DEFAULT_CROSS, parent.inline);\n    };\n    GridAlignColumnsStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridAlignColumnsStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridAlignColumnsStyleBuilder_Factory() { return new GridAlignColumnsStyleBuilder(); }, token: GridAlignColumnsStyleBuilder, providedIn: \"root\" });\n    return GridAlignColumnsStyleBuilder;\n}(StyleBuilder));\nvar GridAlignColumnsDirective = /** @class */ (function (_super) {\n    __extends(GridAlignColumnsDirective, _super);\n    function GridAlignColumnsDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-align-columns';\n        _this._inline = false;\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(GridAlignColumnsDirective.prototype, \"inline\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._inline; },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) { this._inline = coerceBooleanProperty(val); },\n        enumerable: true,\n        configurable: true\n    });\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    GridAlignColumnsDirective.prototype.updateWithValue = \n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.styleCache = this.inline ? alignColumnsInlineCache : alignColumnsCache;\n        this.addStyles(value, { inline: this.inline });\n    };\n    GridAlignColumnsDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridAlignColumnsDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridAlignColumnsStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    GridAlignColumnsDirective.propDecorators = {\n        inline: [{ type: Input, args: ['gdInline',] }]\n    };\n    return GridAlignColumnsDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar alignColumnsCache = new Map();\n/** @type {?} */\nvar alignColumnsInlineCache = new Map();\n/** @type {?} */\nvar inputs$1 = [\n    'gdAlignColumns',\n    'gdAlignColumns.xs', 'gdAlignColumns.sm', 'gdAlignColumns.md',\n    'gdAlignColumns.lg', 'gdAlignColumns.xl', 'gdAlignColumns.lt-sm',\n    'gdAlignColumns.lt-md', 'gdAlignColumns.lt-lg', 'gdAlignColumns.lt-xl',\n    'gdAlignColumns.gt-xs', 'gdAlignColumns.gt-sm', 'gdAlignColumns.gt-md',\n    'gdAlignColumns.gt-lg'\n];\n/** @type {?} */\nvar selector$1 = \"\\n  [gdAlignColumns],\\n  [gdAlignColumns.xs], [gdAlignColumns.sm], [gdAlignColumns.md],\\n  [gdAlignColumns.lg], [gdAlignColumns.xl], [gdAlignColumns.lt-sm],\\n  [gdAlignColumns.lt-md], [gdAlignColumns.lt-lg], [gdAlignColumns.lt-xl],\\n  [gdAlignColumns.gt-xs], [gdAlignColumns.gt-sm], [gdAlignColumns.gt-md],\\n  [gdAlignColumns.gt-lg]\\n\";\n/**\n * 'column alignment' CSS Grid styling directive\n * Configures the alignment in the column direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-19\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-21\n */\nvar DefaultGridAlignColumnsDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridAlignColumnsDirective, _super);\n    function DefaultGridAlignColumnsDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$1;\n        return _this;\n    }\n    DefaultGridAlignColumnsDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$1, inputs: inputs$1 },] },\n    ];\n    return DefaultGridAlignColumnsDirective;\n}(GridAlignColumnsDirective));\n/**\n * @param {?} align\n * @param {?} inline\n * @return {?}\n */\nfunction buildCss$1(align, inline) {\n    /** @type {?} */\n    var css = {};\n    var _a = align.split(' '), mainAxis = _a[0], crossAxis = _a[1];\n    // Main axis\n    switch (mainAxis) {\n        case 'center':\n            css['align-content'] = 'center';\n            break;\n        case 'space-around':\n            css['align-content'] = 'space-around';\n            break;\n        case 'space-between':\n            css['align-content'] = 'space-between';\n            break;\n        case 'space-evenly':\n            css['align-content'] = 'space-evenly';\n            break;\n        case 'end':\n            css['align-content'] = 'end';\n            break;\n        case 'start':\n            css['align-content'] = 'start';\n            break;\n        case 'stretch':\n            css['align-content'] = 'stretch';\n            break;\n        default:\n            css['align-content'] = DEFAULT_MAIN; // default main axis\n            break;\n    }\n    // Cross-axis\n    switch (crossAxis) {\n        case 'start':\n            css['align-items'] = 'start';\n            break;\n        case 'center':\n            css['align-items'] = 'center';\n            break;\n        case 'end':\n            css['align-items'] = 'end';\n            break;\n        case 'stretch':\n            css['align-items'] = 'stretch';\n            break;\n        default: // 'stretch'\n            css['align-items'] = DEFAULT_CROSS; // default cross axis\n            break;\n    }\n    css['display'] = inline ? 'inline-grid' : 'grid';\n    return css;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/align-rows/align-rows.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_MAIN$1 = 'start';\n/** @type {?} */\nvar DEFAULT_CROSS$1 = 'stretch';\nvar GridAlignRowsStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridAlignRowsStyleBuilder, _super);\n    function GridAlignRowsStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    GridAlignRowsStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function (input, parent) {\n        return buildCss$2(input || DEFAULT_MAIN$1 + \" \" + DEFAULT_CROSS$1, parent.inline);\n    };\n    GridAlignRowsStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridAlignRowsStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridAlignRowsStyleBuilder_Factory() { return new GridAlignRowsStyleBuilder(); }, token: GridAlignRowsStyleBuilder, providedIn: \"root\" });\n    return GridAlignRowsStyleBuilder;\n}(StyleBuilder));\nvar GridAlignRowsDirective = /** @class */ (function (_super) {\n    __extends(GridAlignRowsDirective, _super);\n    function GridAlignRowsDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-align-rows';\n        _this._inline = false;\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(GridAlignRowsDirective.prototype, \"inline\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._inline; },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) { this._inline = coerceBooleanProperty(val); },\n        enumerable: true,\n        configurable: true\n    });\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    GridAlignRowsDirective.prototype.updateWithValue = \n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.styleCache = this.inline ? alignRowsInlineCache : alignRowsCache;\n        this.addStyles(value, { inline: this.inline });\n    };\n    GridAlignRowsDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridAlignRowsDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridAlignRowsStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    GridAlignRowsDirective.propDecorators = {\n        inline: [{ type: Input, args: ['gdInline',] }]\n    };\n    return GridAlignRowsDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar alignRowsCache = new Map();\n/** @type {?} */\nvar alignRowsInlineCache = new Map();\n/** @type {?} */\nvar inputs$2 = [\n    'gdAlignRows',\n    'gdAlignRows.xs', 'gdAlignRows.sm', 'gdAlignRows.md',\n    'gdAlignRows.lg', 'gdAlignRows.xl', 'gdAlignRows.lt-sm',\n    'gdAlignRows.lt-md', 'gdAlignRows.lt-lg', 'gdAlignRows.lt-xl',\n    'gdAlignRows.gt-xs', 'gdAlignRows.gt-sm', 'gdAlignRows.gt-md',\n    'gdAlignRows.gt-lg'\n];\n/** @type {?} */\nvar selector$2 = \"\\n  [gdAlignRows],\\n  [gdAlignRows.xs], [gdAlignRows.sm], [gdAlignRows.md],\\n  [gdAlignRows.lg], [gdAlignRows.xl], [gdAlignRows.lt-sm],\\n  [gdAlignRows.lt-md], [gdAlignRows.lt-lg], [gdAlignRows.lt-xl],\\n  [gdAlignRows.gt-xs], [gdAlignRows.gt-sm], [gdAlignRows.gt-md],\\n  [gdAlignRows.gt-lg]\\n\";\n/**\n * 'row alignment' CSS Grid styling directive\n * Configures the alignment in the row direction\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-18\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-20\n */\nvar DefaultGridAlignRowsDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridAlignRowsDirective, _super);\n    function DefaultGridAlignRowsDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$2;\n        return _this;\n    }\n    DefaultGridAlignRowsDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$2, inputs: inputs$2 },] },\n    ];\n    return DefaultGridAlignRowsDirective;\n}(GridAlignRowsDirective));\n/**\n * @param {?} align\n * @param {?} inline\n * @return {?}\n */\nfunction buildCss$2(align, inline) {\n    /** @type {?} */\n    var css = {};\n    var _a = align.split(' '), mainAxis = _a[0], crossAxis = _a[1];\n    // Main axis\n    switch (mainAxis) {\n        case 'center':\n        case 'space-around':\n        case 'space-between':\n        case 'space-evenly':\n        case 'end':\n        case 'start':\n        case 'stretch':\n            css['justify-content'] = mainAxis;\n            break;\n        default:\n            css['justify-content'] = DEFAULT_MAIN$1; // default main axis\n            break;\n    }\n    // Cross-axis\n    switch (crossAxis) {\n        case 'start':\n        case 'center':\n        case 'end':\n        case 'stretch':\n            css['justify-items'] = crossAxis;\n            break;\n        default: // 'stretch'\n            css['justify-items'] = DEFAULT_CROSS$1; // default cross axis\n            break;\n    }\n    css['display'] = inline ? 'inline-grid' : 'grid';\n    return css;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/area/area.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE = 'auto';\nvar GridAreaStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridAreaStyleBuilder, _super);\n    function GridAreaStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    GridAreaStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        return { 'grid-area': input || DEFAULT_VALUE };\n    };\n    GridAreaStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridAreaStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridAreaStyleBuilder_Factory() { return new GridAreaStyleBuilder(); }, token: GridAreaStyleBuilder, providedIn: \"root\" });\n    return GridAreaStyleBuilder;\n}(StyleBuilder));\nvar GridAreaDirective = /** @class */ (function (_super) {\n    __extends(GridAreaDirective, _super);\n    function GridAreaDirective(elRef, styleUtils, styleBuilder, marshal) {\n        var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-area';\n        _this.styleCache = gridAreaCache;\n        _this.init();\n        return _this;\n    }\n    GridAreaDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridAreaDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: StyleUtils },\n        { type: GridAreaStyleBuilder },\n        { type: MediaMarshaller }\n    ]; };\n    return GridAreaDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar gridAreaCache = new Map();\n/** @type {?} */\nvar inputs$3 = [\n    'gdArea',\n    'gdArea.xs', 'gdArea.sm', 'gdArea.md', 'gdArea.lg', 'gdArea.xl',\n    'gdArea.lt-sm', 'gdArea.lt-md', 'gdArea.lt-lg', 'gdArea.lt-xl',\n    'gdArea.gt-xs', 'gdArea.gt-sm', 'gdArea.gt-md', 'gdArea.gt-lg'\n];\n/** @type {?} */\nvar selector$3 = \"\\n  [gdArea],\\n  [gdArea.xs], [gdArea.sm], [gdArea.md], [gdArea.lg], [gdArea.xl],\\n  [gdArea.lt-sm], [gdArea.lt-md], [gdArea.lt-lg], [gdArea.lt-xl],\\n  [gdArea.gt-xs], [gdArea.gt-sm], [gdArea.gt-md], [gdArea.gt-lg]\\n\";\n/**\n * 'grid-area' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-27\n */\nvar DefaultGridAreaDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridAreaDirective, _super);\n    function DefaultGridAreaDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$3;\n        return _this;\n    }\n    DefaultGridAreaDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$3, inputs: inputs$3 },] },\n    ];\n    return DefaultGridAreaDirective;\n}(GridAreaDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/areas/areas.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE$1 = 'none';\n/** @type {?} */\nvar DELIMETER = '|';\nvar GridAreasStyleBuiler = /** @class */ (function (_super) {\n    __extends(GridAreasStyleBuiler, _super);\n    function GridAreasStyleBuiler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    GridAreasStyleBuiler.prototype.buildStyles = /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function (input, parent) {\n        /** @type {?} */\n        var areas = (input || DEFAULT_VALUE$1).split(DELIMETER).map((/**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) { return \"\\\"\" + v.trim() + \"\\\"\"; }));\n        return {\n            'display': parent.inline ? 'inline-grid' : 'grid',\n            'grid-template-areas': areas.join(' ')\n        };\n    };\n    GridAreasStyleBuiler.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridAreasStyleBuiler.ɵprov = ɵɵdefineInjectable({ factory: function GridAreasStyleBuiler_Factory() { return new GridAreasStyleBuiler(); }, token: GridAreasStyleBuiler, providedIn: \"root\" });\n    return GridAreasStyleBuiler;\n}(StyleBuilder));\nvar GridAreasDirective = /** @class */ (function (_super) {\n    __extends(GridAreasDirective, _super);\n    function GridAreasDirective(elRef, styleUtils, styleBuilder, marshal) {\n        var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-areas';\n        _this._inline = false;\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(GridAreasDirective.prototype, \"inline\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._inline; },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) { this._inline = coerceBooleanProperty(val); },\n        enumerable: true,\n        configurable: true\n    });\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    GridAreasDirective.prototype.updateWithValue = \n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.styleCache = this.inline ? areasInlineCache : areasCache;\n        this.addStyles(value, { inline: this.inline });\n    };\n    GridAreasDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridAreasDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: StyleUtils },\n        { type: GridAreasStyleBuiler },\n        { type: MediaMarshaller }\n    ]; };\n    GridAreasDirective.propDecorators = {\n        inline: [{ type: Input, args: ['gdInline',] }]\n    };\n    return GridAreasDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar areasCache = new Map();\n/** @type {?} */\nvar areasInlineCache = new Map();\n/** @type {?} */\nvar inputs$4 = [\n    'gdAreas',\n    'gdAreas.xs', 'gdAreas.sm', 'gdAreas.md', 'gdAreas.lg', 'gdAreas.xl',\n    'gdAreas.lt-sm', 'gdAreas.lt-md', 'gdAreas.lt-lg', 'gdAreas.lt-xl',\n    'gdAreas.gt-xs', 'gdAreas.gt-sm', 'gdAreas.gt-md', 'gdAreas.gt-lg'\n];\n/** @type {?} */\nvar selector$4 = \"\\n  [gdAreas],\\n  [gdAreas.xs], [gdAreas.sm], [gdAreas.md], [gdAreas.lg], [gdAreas.xl],\\n  [gdAreas.lt-sm], [gdAreas.lt-md], [gdAreas.lt-lg], [gdAreas.lt-xl],\\n  [gdAreas.gt-xs], [gdAreas.gt-sm], [gdAreas.gt-md], [gdAreas.gt-lg]\\n\";\n/**\n * 'grid-template-areas' CSS Grid styling directive\n * Configures the names of elements within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-14\n */\nvar DefaultGridAreasDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridAreasDirective, _super);\n    function DefaultGridAreasDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$4;\n        return _this;\n    }\n    DefaultGridAreasDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$4, inputs: inputs$4 },] },\n    ];\n    return DefaultGridAreasDirective;\n}(GridAreasDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/auto/auto.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE$2 = 'initial';\nvar GridAutoStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridAutoStyleBuilder, _super);\n    function GridAutoStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    GridAutoStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function (input, parent) {\n        var _a = (input || DEFAULT_VALUE$2).split(' '), direction = _a[0], dense = _a[1];\n        if (direction !== 'column' && direction !== 'row' && direction !== 'dense') {\n            direction = 'row';\n        }\n        dense = (dense === 'dense' && direction !== 'dense') ? ' dense' : '';\n        return {\n            'display': parent.inline ? 'inline-grid' : 'grid',\n            'grid-auto-flow': direction + dense\n        };\n    };\n    GridAutoStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridAutoStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridAutoStyleBuilder_Factory() { return new GridAutoStyleBuilder(); }, token: GridAutoStyleBuilder, providedIn: \"root\" });\n    return GridAutoStyleBuilder;\n}(StyleBuilder));\nvar GridAutoDirective = /** @class */ (function (_super) {\n    __extends(GridAutoDirective, _super);\n    function GridAutoDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this._inline = false;\n        _this.DIRECTIVE_KEY = 'grid-auto';\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(GridAutoDirective.prototype, \"inline\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._inline; },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) { this._inline = coerceBooleanProperty(val); },\n        enumerable: true,\n        configurable: true\n    });\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    GridAutoDirective.prototype.updateWithValue = \n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.styleCache = this.inline ? autoInlineCache : autoCache;\n        this.addStyles(value, { inline: this.inline });\n    };\n    GridAutoDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridAutoDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridAutoStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    GridAutoDirective.propDecorators = {\n        inline: [{ type: Input, args: ['gdInline',] }]\n    };\n    return GridAutoDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar autoCache = new Map();\n/** @type {?} */\nvar autoInlineCache = new Map();\n/** @type {?} */\nvar inputs$5 = [\n    'gdAuto',\n    'gdAuto.xs', 'gdAuto.sm', 'gdAuto.md', 'gdAuto.lg', 'gdAuto.xl',\n    'gdAuto.lt-sm', 'gdAuto.lt-md', 'gdAuto.lt-lg', 'gdAuto.lt-xl',\n    'gdAuto.gt-xs', 'gdAuto.gt-sm', 'gdAuto.gt-md', 'gdAuto.gt-lg'\n];\n/** @type {?} */\nvar selector$5 = \"\\n  [gdAuto],\\n  [gdAuto.xs], [gdAuto.sm], [gdAuto.md], [gdAuto.lg], [gdAuto.xl],\\n  [gdAuto.lt-sm], [gdAuto.lt-md], [gdAuto.lt-lg], [gdAuto.lt-xl],\\n  [gdAuto.gt-xs], [gdAuto.gt-sm], [gdAuto.gt-md], [gdAuto.gt-lg]\\n\";\n/**\n * 'grid-auto-flow' CSS Grid styling directive\n * Configures the auto placement algorithm for the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-23\n */\nvar DefaultGridAutoDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridAutoDirective, _super);\n    function DefaultGridAutoDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$5;\n        return _this;\n    }\n    DefaultGridAutoDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$5, inputs: inputs$5 },] },\n    ];\n    return DefaultGridAutoDirective;\n}(GridAutoDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/column/column.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE$3 = 'auto';\nvar GridColumnStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridColumnStyleBuilder, _super);\n    function GridColumnStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    GridColumnStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        return { 'grid-column': input || DEFAULT_VALUE$3 };\n    };\n    GridColumnStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridColumnStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridColumnStyleBuilder_Factory() { return new GridColumnStyleBuilder(); }, token: GridColumnStyleBuilder, providedIn: \"root\" });\n    return GridColumnStyleBuilder;\n}(StyleBuilder));\nvar GridColumnDirective = /** @class */ (function (_super) {\n    __extends(GridColumnDirective, _super);\n    function GridColumnDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-column';\n        _this.styleCache = columnCache;\n        _this.init();\n        return _this;\n    }\n    GridColumnDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridColumnDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridColumnStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    return GridColumnDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar columnCache = new Map();\n/** @type {?} */\nvar inputs$6 = [\n    'gdColumn',\n    'gdColumn.xs', 'gdColumn.sm', 'gdColumn.md', 'gdColumn.lg', 'gdColumn.xl',\n    'gdColumn.lt-sm', 'gdColumn.lt-md', 'gdColumn.lt-lg', 'gdColumn.lt-xl',\n    'gdColumn.gt-xs', 'gdColumn.gt-sm', 'gdColumn.gt-md', 'gdColumn.gt-lg'\n];\n/** @type {?} */\nvar selector$6 = \"\\n  [gdColumn],\\n  [gdColumn.xs], [gdColumn.sm], [gdColumn.md], [gdColumn.lg], [gdColumn.xl],\\n  [gdColumn.lt-sm], [gdColumn.lt-md], [gdColumn.lt-lg], [gdColumn.lt-xl],\\n  [gdColumn.gt-xs], [gdColumn.gt-sm], [gdColumn.gt-md], [gdColumn.gt-lg]\\n\";\n/**\n * 'grid-column' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\nvar DefaultGridColumnDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridColumnDirective, _super);\n    function DefaultGridColumnDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$6;\n        return _this;\n    }\n    DefaultGridColumnDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$6, inputs: inputs$6 },] },\n    ];\n    return DefaultGridColumnDirective;\n}(GridColumnDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/columns/columns.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE$4 = 'none';\n/** @type {?} */\nvar AUTO_SPECIFIER = '!';\nvar GridColumnsStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridColumnsStyleBuilder, _super);\n    function GridColumnsStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    GridColumnsStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function (input, parent) {\n        input = input || DEFAULT_VALUE$4;\n        /** @type {?} */\n        var auto = false;\n        if (input.endsWith(AUTO_SPECIFIER)) {\n            input = input.substring(0, input.indexOf(AUTO_SPECIFIER));\n            auto = true;\n        }\n        /** @type {?} */\n        var css = {\n            'display': parent.inline ? 'inline-grid' : 'grid',\n            'grid-auto-columns': '',\n            'grid-template-columns': '',\n        };\n        /** @type {?} */\n        var key = (auto ? 'grid-auto-columns' : 'grid-template-columns');\n        css[key] = input;\n        return css;\n    };\n    GridColumnsStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridColumnsStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridColumnsStyleBuilder_Factory() { return new GridColumnsStyleBuilder(); }, token: GridColumnsStyleBuilder, providedIn: \"root\" });\n    return GridColumnsStyleBuilder;\n}(StyleBuilder));\nvar GridColumnsDirective = /** @class */ (function (_super) {\n    __extends(GridColumnsDirective, _super);\n    function GridColumnsDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-columns';\n        _this._inline = false;\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(GridColumnsDirective.prototype, \"inline\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._inline; },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) { this._inline = coerceBooleanProperty(val); },\n        enumerable: true,\n        configurable: true\n    });\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    GridColumnsDirective.prototype.updateWithValue = \n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.styleCache = this.inline ? columnsInlineCache : columnsCache;\n        this.addStyles(value, { inline: this.inline });\n    };\n    GridColumnsDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridColumnsDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridColumnsStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    GridColumnsDirective.propDecorators = {\n        inline: [{ type: Input, args: ['gdInline',] }]\n    };\n    return GridColumnsDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar columnsCache = new Map();\n/** @type {?} */\nvar columnsInlineCache = new Map();\n/** @type {?} */\nvar inputs$7 = [\n    'gdColumns',\n    'gdColumns.xs', 'gdColumns.sm', 'gdColumns.md', 'gdColumns.lg', 'gdColumns.xl',\n    'gdColumns.lt-sm', 'gdColumns.lt-md', 'gdColumns.lt-lg', 'gdColumns.lt-xl',\n    'gdColumns.gt-xs', 'gdColumns.gt-sm', 'gdColumns.gt-md', 'gdColumns.gt-lg'\n];\n/** @type {?} */\nvar selector$7 = \"\\n  [gdColumns],\\n  [gdColumns.xs], [gdColumns.sm], [gdColumns.md], [gdColumns.lg], [gdColumns.xl],\\n  [gdColumns.lt-sm], [gdColumns.lt-md], [gdColumns.lt-lg], [gdColumns.lt-xl],\\n  [gdColumns.gt-xs], [gdColumns.gt-sm], [gdColumns.gt-md], [gdColumns.gt-lg]\\n\";\n/**\n * 'grid-template-columns' CSS Grid styling directive\n * Configures the sizing for the columns in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\nvar DefaultGridColumnsDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridColumnsDirective, _super);\n    function DefaultGridColumnsDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$7;\n        return _this;\n    }\n    DefaultGridColumnsDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$7, inputs: inputs$7 },] },\n    ];\n    return DefaultGridColumnsDirective;\n}(GridColumnsDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/gap/gap.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE$5 = '0';\nvar GridGapStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridGapStyleBuilder, _super);\n    function GridGapStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    GridGapStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function (input, parent) {\n        return {\n            'display': parent.inline ? 'inline-grid' : 'grid',\n            'grid-gap': input || DEFAULT_VALUE$5\n        };\n    };\n    GridGapStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridGapStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridGapStyleBuilder_Factory() { return new GridGapStyleBuilder(); }, token: GridGapStyleBuilder, providedIn: \"root\" });\n    return GridGapStyleBuilder;\n}(StyleBuilder));\nvar GridGapDirective = /** @class */ (function (_super) {\n    __extends(GridGapDirective, _super);\n    function GridGapDirective(elRef, styleUtils, styleBuilder, marshal) {\n        var _this = _super.call(this, elRef, styleBuilder, styleUtils, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-gap';\n        _this._inline = false;\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(GridGapDirective.prototype, \"inline\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._inline; },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) { this._inline = coerceBooleanProperty(val); },\n        enumerable: true,\n        configurable: true\n    });\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    GridGapDirective.prototype.updateWithValue = \n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.styleCache = this.inline ? gapInlineCache : gapCache;\n        this.addStyles(value, { inline: this.inline });\n    };\n    GridGapDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridGapDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: StyleUtils },\n        { type: GridGapStyleBuilder },\n        { type: MediaMarshaller }\n    ]; };\n    GridGapDirective.propDecorators = {\n        inline: [{ type: Input, args: ['gdInline',] }]\n    };\n    return GridGapDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar gapCache = new Map();\n/** @type {?} */\nvar gapInlineCache = new Map();\n/** @type {?} */\nvar inputs$8 = [\n    'gdGap',\n    'gdGap.xs', 'gdGap.sm', 'gdGap.md', 'gdGap.lg', 'gdGap.xl',\n    'gdGap.lt-sm', 'gdGap.lt-md', 'gdGap.lt-lg', 'gdGap.lt-xl',\n    'gdGap.gt-xs', 'gdGap.gt-sm', 'gdGap.gt-md', 'gdGap.gt-lg'\n];\n/** @type {?} */\nvar selector$8 = \"\\n  [gdGap],\\n  [gdGap.xs], [gdGap.sm], [gdGap.md], [gdGap.lg], [gdGap.xl],\\n  [gdGap.lt-sm], [gdGap.lt-md], [gdGap.lt-lg], [gdGap.lt-xl],\\n  [gdGap.gt-xs], [gdGap.gt-sm], [gdGap.gt-md], [gdGap.gt-lg]\\n\";\n/**\n * 'grid-gap' CSS Grid styling directive\n * Configures the gap between items in the grid\n * Syntax: <row gap> [<column-gap>]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-17\n */\nvar DefaultGridGapDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridGapDirective, _super);\n    function DefaultGridGapDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$8;\n        return _this;\n    }\n    DefaultGridGapDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$8, inputs: inputs$8 },] },\n    ];\n    return DefaultGridGapDirective;\n}(GridGapDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/row/row.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE$6 = 'auto';\nvar GridRowStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridRowStyleBuilder, _super);\n    function GridRowStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    GridRowStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        return { 'grid-row': input || DEFAULT_VALUE$6 };\n    };\n    GridRowStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridRowStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridRowStyleBuilder_Factory() { return new GridRowStyleBuilder(); }, token: GridRowStyleBuilder, providedIn: \"root\" });\n    return GridRowStyleBuilder;\n}(StyleBuilder));\nvar GridRowDirective = /** @class */ (function (_super) {\n    __extends(GridRowDirective, _super);\n    function GridRowDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-row';\n        _this.styleCache = rowCache;\n        _this.init();\n        return _this;\n    }\n    GridRowDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridRowDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridRowStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    return GridRowDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar rowCache = new Map();\n/** @type {?} */\nvar inputs$9 = [\n    'gdRow',\n    'gdRow.xs', 'gdRow.sm', 'gdRow.md', 'gdRow.lg', 'gdRow.xl',\n    'gdRow.lt-sm', 'gdRow.lt-md', 'gdRow.lt-lg', 'gdRow.lt-xl',\n    'gdRow.gt-xs', 'gdRow.gt-sm', 'gdRow.gt-md', 'gdRow.gt-lg'\n];\n/** @type {?} */\nvar selector$9 = \"\\n  [gdRow],\\n  [gdRow.xs], [gdRow.sm], [gdRow.md], [gdRow.lg], [gdRow.xl],\\n  [gdRow.lt-sm], [gdRow.lt-md], [gdRow.lt-lg], [gdRow.lt-xl],\\n  [gdRow.gt-xs], [gdRow.gt-sm], [gdRow.gt-md], [gdRow.gt-lg]\\n\";\n/**\n * 'grid-row' CSS Grid styling directive\n * Configures the name or position of an element within the grid\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-26\n */\nvar DefaultGridRowDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridRowDirective, _super);\n    function DefaultGridRowDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$9;\n        return _this;\n    }\n    DefaultGridRowDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$9, inputs: inputs$9 },] },\n    ];\n    return DefaultGridRowDirective;\n}(GridRowDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/rows/rows.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_VALUE$7 = 'none';\n/** @type {?} */\nvar AUTO_SPECIFIER$1 = '!';\nvar GridRowsStyleBuilder = /** @class */ (function (_super) {\n    __extends(GridRowsStyleBuilder, _super);\n    function GridRowsStyleBuilder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    GridRowsStyleBuilder.prototype.buildStyles = /**\n     * @param {?} input\n     * @param {?} parent\n     * @return {?}\n     */\n    function (input, parent) {\n        input = input || DEFAULT_VALUE$7;\n        /** @type {?} */\n        var auto = false;\n        if (input.endsWith(AUTO_SPECIFIER$1)) {\n            input = input.substring(0, input.indexOf(AUTO_SPECIFIER$1));\n            auto = true;\n        }\n        /** @type {?} */\n        var css = {\n            'display': parent.inline ? 'inline-grid' : 'grid',\n            'grid-auto-rows': '',\n            'grid-template-rows': '',\n        };\n        /** @type {?} */\n        var key = (auto ? 'grid-auto-rows' : 'grid-template-rows');\n        css[key] = input;\n        return css;\n    };\n    GridRowsStyleBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ GridRowsStyleBuilder.ɵprov = ɵɵdefineInjectable({ factory: function GridRowsStyleBuilder_Factory() { return new GridRowsStyleBuilder(); }, token: GridRowsStyleBuilder, providedIn: \"root\" });\n    return GridRowsStyleBuilder;\n}(StyleBuilder));\nvar GridRowsDirective = /** @class */ (function (_super) {\n    __extends(GridRowsDirective, _super);\n    function GridRowsDirective(elementRef, styleBuilder, styler, marshal) {\n        var _this = _super.call(this, elementRef, styleBuilder, styler, marshal) || this;\n        _this.DIRECTIVE_KEY = 'grid-rows';\n        _this._inline = false;\n        _this.init();\n        return _this;\n    }\n    Object.defineProperty(GridRowsDirective.prototype, \"inline\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._inline; },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */\n        function (val) { this._inline = coerceBooleanProperty(val); },\n        enumerable: true,\n        configurable: true\n    });\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    GridRowsDirective.prototype.updateWithValue = \n    // *********************************************\n    // Protected methods\n    // *********************************************\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.styleCache = this.inline ? rowsInlineCache : rowsCache;\n        this.addStyles(value, { inline: this.inline });\n    };\n    GridRowsDirective.decorators = [\n        { type: Directive },\n    ];\n    /** @nocollapse */\n    GridRowsDirective.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: GridRowsStyleBuilder },\n        { type: StyleUtils },\n        { type: MediaMarshaller }\n    ]; };\n    GridRowsDirective.propDecorators = {\n        inline: [{ type: Input, args: ['gdInline',] }]\n    };\n    return GridRowsDirective;\n}(BaseDirective2));\n/** @type {?} */\nvar rowsCache = new Map();\n/** @type {?} */\nvar rowsInlineCache = new Map();\n/** @type {?} */\nvar inputs$10 = [\n    'gdRows',\n    'gdRows.xs', 'gdRows.sm', 'gdRows.md', 'gdRows.lg', 'gdRows.xl',\n    'gdRows.lt-sm', 'gdRows.lt-md', 'gdRows.lt-lg', 'gdRows.lt-xl',\n    'gdRows.gt-xs', 'gdRows.gt-sm', 'gdRows.gt-md', 'gdRows.gt-lg'\n];\n/** @type {?} */\nvar selector$10 = \"\\n  [gdRows],\\n  [gdRows.xs], [gdRows.sm], [gdRows.md], [gdRows.lg], [gdRows.xl],\\n  [gdRows.lt-sm], [gdRows.lt-md], [gdRows.lt-lg], [gdRows.lt-xl],\\n  [gdRows.gt-xs], [gdRows.gt-sm], [gdRows.gt-md], [gdRows.gt-lg]\\n\";\n/**\n * 'grid-template-rows' CSS Grid styling directive\n * Configures the sizing for the rows in the grid\n * Syntax: <column value> [auto]\n * @see https://css-tricks.com/snippets/css/complete-guide-grid/#article-header-id-13\n */\nvar DefaultGridRowsDirective = /** @class */ (function (_super) {\n    __extends(DefaultGridRowsDirective, _super);\n    function DefaultGridRowsDirective() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.inputs = inputs$10;\n        return _this;\n    }\n    DefaultGridRowsDirective.decorators = [\n        { type: Directive, args: [{ selector: selector$10, inputs: inputs$10 },] },\n    ];\n    return DefaultGridRowsDirective;\n}(GridRowsDirective));\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar ALL_DIRECTIVES = [\n    DefaultGridAlignDirective,\n    DefaultGridAlignColumnsDirective,\n    DefaultGridAlignRowsDirective,\n    DefaultGridAreaDirective,\n    DefaultGridAreasDirective,\n    DefaultGridAutoDirective,\n    DefaultGridColumnDirective,\n    DefaultGridColumnsDirective,\n    DefaultGridGapDirective,\n    DefaultGridRowDirective,\n    DefaultGridRowsDirective,\n];\n/**\n * *****************************************************************\n * Define module for the CSS Grid API\n * *****************************************************************\n */\nvar GridModule = /** @class */ (function () {\n    function GridModule() {\n    }\n    GridModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CoreModule],\n                    declarations: __spreadArrays(ALL_DIRECTIVES),\n                    exports: __spreadArrays(ALL_DIRECTIVES)\n                },] },\n    ];\n    return GridModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: grid/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { GridModule, DefaultGridAlignColumnsDirective as ɵgrid_privatef, GridAlignColumnsDirective as ɵgrid_privatee, GridAlignColumnsStyleBuilder as ɵgrid_privated, DefaultGridAlignRowsDirective as ɵgrid_privatei, GridAlignRowsDirective as ɵgrid_privateh, GridAlignRowsStyleBuilder as ɵgrid_privateg, DefaultGridAreaDirective as ɵgrid_privatel, GridAreaDirective as ɵgrid_privatek, GridAreaStyleBuilder as ɵgrid_privatej, DefaultGridAreasDirective as ɵgrid_privateo, GridAreasDirective as ɵgrid_privaten, GridAreasStyleBuiler as ɵgrid_privatem, DefaultGridAutoDirective as ɵgrid_privater, GridAutoDirective as ɵgrid_privateq, GridAutoStyleBuilder as ɵgrid_privatep, DefaultGridColumnDirective as ɵgrid_privateu, GridColumnDirective as ɵgrid_privatet, GridColumnStyleBuilder as ɵgrid_privates, DefaultGridColumnsDirective as ɵgrid_privatex, GridColumnsDirective as ɵgrid_privatew, GridColumnsStyleBuilder as ɵgrid_privatev, DefaultGridGapDirective as ɵgrid_privateba, GridGapDirective as ɵgrid_privatez, GridGapStyleBuilder as ɵgrid_privatey, DefaultGridAlignDirective as ɵgrid_privatec, GridAlignDirective as ɵgrid_privateb, GridAlignStyleBuilder as ɵgrid_privatea, DefaultGridRowDirective as ɵgrid_privatebd, GridRowDirective as ɵgrid_privatebc, GridRowStyleBuilder as ɵgrid_privatebb, DefaultGridRowsDirective as ɵgrid_privatebg, GridRowsDirective as ɵgrid_privatebf, GridRowsStyleBuilder as ɵgrid_privatebe };\n"]}